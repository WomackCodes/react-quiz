[{"/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/index.tsx":"1","/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/App.tsx":"2","/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/API.tsx":"3","/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/utils.ts":"4","/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/components/QuestionCard.tsx":"5"},{"size":196,"mtime":1608128933214,"results":"6","hashOfConfig":"7"},{"size":2688,"mtime":1608135454712,"results":"8","hashOfConfig":"7"},{"size":938,"mtime":1608129690535,"results":"9","hashOfConfig":"7"},{"size":94,"mtime":1608133754320,"results":"10","hashOfConfig":"7"},{"size":1000,"mtime":1608135542134,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1cv1viq",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/index.tsx",[],["24","25"],"/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/App.tsx",["26"],"import React, { useState } from 'react';\nimport {fetchQuizQuestions} from './API';\n\n// Components\nimport QuestionCard from './components/QuestionCard';\n\n// Types\nimport{ QuestionState, Difficulty } from './API';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  \nconsole.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    \n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore(prev => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer: answer,\n        correct: correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number +1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score:</p> : null}\n      {loading && <p>Loading Questions ...</p> }\n      {!loading && !gameOver && (\n        <QuestionCard \n          questionNumber={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n        ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/API.tsx",[],"/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/utils.ts",[],"/Users/cwomack/Code/react-practice/react-quiz/react-quiz/src/components/QuestionCard.tsx",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":25,"column":10,"nodeType":"33","messageId":"34","endLine":25,"endColumn":15},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'score' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]